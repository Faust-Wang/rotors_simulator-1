<?xml version="1.0"?>
<!--
  Copyright 2015 Fadri Furrer, ASL, ETH Zurich, Switzerland
  Copyright 2015 Michael Burri, ASL, ETH Zurich, Switzerland
  Copyright 2015 Mina Kamel, ASL, ETH Zurich, Switzerland
  Copyright 2015 Janosch Nikolic, ASL, ETH Zurich, Switzerland
  Copyright 2015 Markus Achtelik, ASL, ETH Zurich, Switzerland

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<robot xmlns:xacro="http://ros.org/wiki/xacro">
  <!-- Macro for the inertia of a box -->
  <xacro:macro name="box_inertia" params="x y z mass">
    <inertia ixx="${0.0833333 * mass * (y*y + z*z)}" ixy="0.0" ixz="0.0"
      iyy="${0.0833333 * mass * (x*x + z*z)}" iyz="0.0"
      izz="${0.0833333 * mass * (x*x + y*y)}" />
  </xacro:macro>

  <!-- Macro for the inertia of a cylinder -->
  <xacro:macro name="cylinder_inertia" params="r h mass">
    <inertia ixx="${0.0833333 * mass * (3*r*r + h*h)}" ixy="0.0" ixz="0.0"
      iyy="${0.0833333 * mass * (3*r*r + h*h)}" iyz="0.0"
      izz="${0.5 * mass * r * r}" />
  </xacro:macro>

  <!-- Macro for the inertial properties of a box -->
  <xacro:macro name="box_inertial" params="x y z mass *origin">
    <inertial>
      <mass value="${mass}" />
      <xacro:insert_block name="origin" />
      <xacro:box_inertia x="${x}" y="${y}" z="${z}" mass="${mass}" />
    </inertial>
  </xacro:macro>

  <!-- Fixed-wing fuselage link -->
  <xacro:macro name="fixed_wing_base_macro"
    params="robot_namespace mass body_length body_width body_height 
      color use_mesh_file mesh_file *inertia">
    <link name="${robot_namespace}/base_link"></link>

    <joint name="${robot_namespace}/base_joint" type="fixed">
      <origin xyz="0 0 0.1" rpy="0 0 0" />
      <parent link="${robot_namespace}/base_link" />
      <child link="${robot_namespace}/base_link_inertia" />
    </joint>

    <link name="${robot_namespace}/base_link_inertia">
      <inertial>
        <mass value="${mass}" />  <!-- [kg] -->
        <origin xyz="0 0 0" />
        <xacro:insert_block name="inertia" />
      </inertial>
      <visual>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <xacro:if value="${use_mesh_file}">
            <mesh filename="${mesh_file}" scale="1 1 1" />
          </xacro:if>
          <xacro:unless value="${use_mesh_file}">
            <box size="${body_length} ${body_width} ${body_height}"/> <!-- [m] [m] [m] -->
          </xacro:unless>
        </geometry>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <box size="${body_length} ${body_width} ${body_height}" /> <!-- [m] [m] [m] -->
        </geometry>
      </collision>
    </link>

    <gazebo>
      <plugin name="${robot_namespace}_base" filename="librotors_gazebo_fixedwing_base_plugin.so">
        <robotNamespace>${robot_namespace}</robotNamespace>
        <linkName>${robot_namespace}/base_link</linkName>
      </plugin>
    </gazebo>
    <gazebo reference="${robot_namespace}/base_link">
      <material>Gazebo/${color}</material>
    </gazebo>
  </xacro:macro>

  <!-- Wheel joint and link -->
  <xacro:macro name="wheel"
    params="robot_namespace suffix parent mass_wheel color use_mesh mesh 
      wheel_radius wheel_width *origin *inertia">

    <joint name="${robot_namespace}/wheel_${suffix}_joint" type="revolute">
      <xacro:insert_block name="origin" />
      <axis xyz="0 1 0" />
      <parent link="${parent}" />
      <child link="${robot_namespace}/wheel_${suffix}" />
      <limit upper="0" lower="0" effort="0" velocity="0" />
    </joint>

    <link name="${robot_namespace}/wheel_${suffix}">
      <inertial>
        <mass value="${mass_wheel}" /> <!-- [kg] -->
        <xacro:insert_block name="inertia" />
      </inertial>
      <visual>
        <geometry>
          <xacro:if value="${use_mesh}">
            <mesh filename="${mesh}"
              scale="1 1 1" />
          </xacro:if>
          <xacro:unless value="${use_mesh}">
            <cylinder length="${wheel_width}" radius="${wheel_radius}" /> <!-- [m] -->
          </xacro:unless>
        </geometry>
      </visual>
      <collision>
        <geometry>
          <cylinder length="${wheel_width}" radius="${wheel_radius}" /> <!-- [m] -->
        </geometry>
      </collision>
    </link>

    <gazebo reference="${robot_namespace}/wheel_${suffix}">
      <material>Gazebo/${color}</material>
    </gazebo>
  </xacro:macro>

  <!-- Wing joint and link -->
  <xacro:macro name="wing"
    params="robot_namespace suffix parent mass_wing wing_length wing_width wing_height 
      color use_mesh mesh alpha_0 alpha_stall c_L_alpha air_density *origin *inertia">

    <joint name="${robot_namespace}/wing_${suffix}_joint" type="revolute">
      <xacro:insert_block name="origin" />
      <axis xyz="1 0 0" />
      <parent link="${parent}" />
      <child link="${robot_namespace}/wing_${suffix}" />
      <limit upper="0" lower="0" effort="0" velocity="0" />
    </joint>

    <link name="${robot_namespace}/wing_${suffix}">
      <inertial>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <mass value="${mass_wing}" /> <!-- [kg] -->
        <xacro:insert_block name="inertia" />
      </inertial>
      <visual>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <xacro:if value="${use_mesh}">
            <mesh filename="${mesh}"
              scale="1 1 1" />
          </xacro:if>
          <xacro:unless value="${use_mesh}">
            <box size="${wing_length} ${wing_width} ${wing_height}"/> <!-- [m] [m] [m] -->
          </xacro:unless>
        </geometry>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <box size="${wing_length} ${wing_width} ${wing_height}"/> <!-- [m] [m] [m] -->
        </geometry>
      </collision>
    </link>

    <gazebo>
      <plugin name="${robot_namespace}_${suffix}_lift_drag" filename="libLiftDragPlugin.so">
        <a0>${alpha_0}</a0>
        <cla>${c_L_alpha}</cla>
        <cda>0.1</cda>
        <cma>-0.1</cma>
        <alpha_stall>${alpha_stall}</alpha_stall>
        <cla_stall>-0.1</cla_stall>
        <cda_stall>0.1</cda_stall>
        <cma_stall>-0.2</cma_stall>
        <cp>0.0 0.0 0.0</cp>
        <area>${wing_length * wing_width}</area>
        <air_density>${air_density}</air_density>
        <forward>1 0 0</forward>
        <upward>0 0 1</upward>
        <link_name>${robot_namespace}/wing_${suffix}</link_name>
      </plugin>
    </gazebo>
    <gazebo reference="${robot_namespace}/wing_${suffix}">
      <material>Gazebo/${color}</material>
    </gazebo>
  </xacro:macro>

  <!-- Tail joint and link -->
  <xacro:macro name="tail"
    params="robot_namespace parent mass_tail tail_length tail_width tail_height 
      color use_mesh mesh *origin *inertia">

    <joint name="${robot_namespace}/tail_joint" type="revolute">
      <xacro:insert_block name="origin" />
      <axis xyz="0 0 1" />
      <parent link="${parent}" />
      <child link="${robot_namespace}/tail" />
      <limit upper="0" lower="0" effort="0" velocity="0" />
    </joint>

    <link name="${robot_namespace}/tail">
      <inertial>
        <mass value="${mass_tail}" /> <!-- [kg] -->
        <xacro:insert_block name="inertia" />
      </inertial>
      <visual>
        <geometry>
          <xacro:if value="${use_mesh}">
            <mesh filename="${mesh}"
              scale="1 1 1" />
          </xacro:if>
          <xacro:unless value="${use_mesh}">
            <box size="${tail_length} ${tail_width} ${tail_height}"/> <!-- [m] [m] [m] -->
          </xacro:unless>
        </geometry>
      </visual>
      <collision>
        <geometry>
          <box size="${tail_length} ${tail_width} ${tail_height}"/> <!-- [m] [m] [m] -->
        </geometry>
      </collision>
    </link>

    <gazebo reference="${robot_namespace}/tail">
      <material>Gazebo/${color}</material>
    </gazebo>
  </xacro:macro>

  <!-- Rear wing joint and link -->
  <xacro:macro name="rear_wing"
    params="robot_namespace suffix parent mass_rear_wing rear_wing_length rear_wing_width 
      rear_wing_height color use_mesh mesh alpha_0 alpha_stall c_L_alpha air_density *origin *inertia">

    <joint name="${robot_namespace}/rear_wing_${suffix}_joint" type="revolute">
      <xacro:insert_block name="origin" />
      <axis xyz="0 0 1" />
      <parent link="${parent}" />
      <child link="${robot_namespace}/rear_wing_${suffix}" />
      <limit upper="0" lower="0" effort="0" velocity="0" />
    </joint>

    <link name="${robot_namespace}/rear_wing_${suffix}">
      <inertial>
        <mass value="${mass_rear_wing}" /> <!-- [kg] -->
        <xacro:insert_block name="inertia" />
      </inertial>
      <visual>
        <geometry>
          <xacro:if value="${use_mesh}">
            <mesh filename="${mesh}"
              scale="1 1 1" />
          </xacro:if>
          <xacro:unless value="${use_mesh}">
            <box size="${rear_wing_length} ${rear_wing_width} ${rear_wing_height}"/> <!-- [m] [m] [m] -->
          </xacro:unless>
        </geometry>
      </visual>
      <collision>
        <geometry>
          <box size="${rear_wing_length} ${rear_wing_width} ${rear_wing_height}"/> <!-- [m] [m] [m] -->
        </geometry>
      </collision>
    </link>

    <gazebo>
      <plugin name="${robot_namespace}_${suffix}_rear_lift_drag" filename="libLiftDragPlugin.so">
        <a0>${alpha_0}</a0>
        <cla>${c_L_alpha}</cla>
        <cda>0.1</cda>
        <cma>-0.1</cma>
        <alpha_stall>${alpha_stall}</alpha_stall>
        <cla_stall>-0.1</cla_stall>
        <cda_stall>0.1</cda_stall>
        <cma_stall>-0.2</cma_stall>
        <cp>0.0 0.0 0.0</cp>
        <area>${rear_wing_length * rear_wing_width}</area>
        <air_density>${air_density}</air_density>
        <forward>1 0 0</forward>
        <upward>0 0 1</upward>
        <link_name>${robot_namespace}/rear_wing_${suffix}</link_name>
      </plugin>
    </gazebo>
    <gazebo reference="${robot_namespace}/rear_wing_${suffix}">
      <material>Gazebo/${color}</material>
    </gazebo>
  </xacro:macro>

  <!-- Propeller joint and link -->
  <xacro:macro name="propeller"
    params="robot_namespace direction motor_constant moment_constant parent mass_propeller 
      radius_propeller time_constant_up time_constant_down max_propeller_velocity motor_number 
      rotor_drag_coefficient rolling_moment_coefficient use_own_mesh mesh color *origin *inertia">

    <joint name="${robot_namespace}/propeller_joint" type="continuous">
      <xacro:insert_block name="origin" />
      <axis xyz="0 0 1" />
      <parent link="${parent}" />
      <child link="${robot_namespace}/propeller" />
    </joint>

    <link name="${robot_namespace}/propeller">
      <inertial>
        <mass value="${mass_propeller}" /> <!-- [kg] -->
        <xacro:insert_block name="inertia" />
      </inertial>
      <visual>
        <geometry>
          <xacro:if value="${use_own_mesh}">
            <mesh filename="${mesh}"
              scale="1 1 1" />
          </xacro:if>
          <xacro:unless value="${use_own_mesh}">
            <mesh filename="package://rotors_description/meshes/propeller_${direction}.dae"
              scale="${radius_propeller} ${radius_propeller} ${radius_propeller}" /> <!-- The propeller meshes have a radius of 1m -->
          </xacro:unless>
        </geometry>
      </visual>
      <collision>
        <geometry>
          <cylinder length="0.005" radius="0.1" /> <!-- [m] -->
        </geometry>
      </collision>
    </link>

    <gazebo>
      <plugin name="${robot_namespace}_propeller" filename="librotors_gazebo_motor_model.so">
        <robotNamespace>${robot_namespace}</robotNamespace>
        <jointName>${robot_namespace}/propeller_joint</jointName>
        <linkName>${robot_namespace}/propeller</linkName>
        <turningDirection>${direction}</turningDirection>
        <timeConstantUp>${time_constant_up}</timeConstantUp>
        <timeConstantDown>${time_constant_down}</timeConstantDown>
        <maxRotVelocity>${max_propeller_velocity}</maxRotVelocity>
        <motorConstant>${motor_constant}</motorConstant>
        <momentConstant>${moment_constant}</momentConstant>
        <commandSubTopic>gazebo/command/motor_speed</commandSubTopic>
        <motorNumber>${motor_number}</motorNumber>
        <rotorDragCoefficient>${rotor_drag_coefficient}</rotorDragCoefficient>
        <rollingMomentCoefficient>${rolling_moment_coefficient}</rollingMomentCoefficient>
        <motorSpeedPubTopic>motor_speed/${motor_number}</motorSpeedPubTopic>
        <rotorVelocitySlowdownSim>${propeller_velocity_slowdown_sim}</rotorVelocitySlowdownSim>
      </plugin>
    </gazebo>
    <gazebo reference="${robot_namespace}/propeller">
      <material>Gazebo/${color}</material>
    </gazebo>
  </xacro:macro>

  <!-- Control surface joint and link -->
  <xacro:macro name="control_surface"
    params="robot_namespace surface_name parent mass_surface velocity_gain 
      positive_direction min_angle max_angle channel color use_mesh mesh 
      surface_length surface_width surface_height area forward_x forward_y
      forward_z up_x up_y up_z c_L_alpha alpha_stall *axis *joint_origin *link_origin *inertia">

    <joint name="${robot_namespace}/${surface_name}_joint" type="revolute">
      <xacro:insert_block name="joint_origin" />
      <xacro:insert_block name="axis" />
      <parent link="${parent}" />
      <child link="${robot_namespace}/${surface_name}" />
      <limit upper="${max_angle}" lower="${min_angle}" effort="100.0" velocity="3.0" />
    </joint>

    <link name="${robot_namespace}/${surface_name}">
      <gravity>0</gravity>
      <inertial>
        <xacro:insert_block name="link_origin" />
        <mass value="${mass_surface}" /> <!-- [kg] -->
        <xacro:insert_block name="inertia" />
      </inertial>
      <visual>
        <xacro:insert_block name="link_origin" />
        <geometry>
          <xacro:if value="${use_mesh}">
            <mesh filename="${mesh}"
              scale="1 1 1" />
          </xacro:if>
          <xacro:unless value="${use_mesh}">
            <box size="${surface_length} ${surface_width} ${surface_height}"/> <!-- [m] [m] [m] -->
          </xacro:unless>
        </geometry>
      </visual>
      <collision>
        <xacro:insert_block name="link_origin" />
        <geometry>
          <box size="${surface_length} ${surface_width} ${surface_height}"/> <!-- [m] [m] [m] -->
        </geometry>
      </collision>
    </link>

    <gazebo>
      <plugin name="${robot_namespace}_${surface_name}_servo" filename="librotors_gazebo_servo_plugin.so">
        <robotNamespace>${robot_namespace}</robotNamespace>
        <jointName>${robot_namespace}/${surface_name}_joint</jointName>
        <childLinkName>${robot_namespace}/${surface_name}</childLinkName>
        <commandSubTopic>gazebo/command/motor_speed</commandSubTopic>
        <positiveDirection>${positive_direction}</positiveDirection>
        <velocityGain>${velocity_gain}</velocityGain>
        <minAngle>${min_angle}</minAngle>
        <maxAngle>${max_angle}</maxAngle>
        <channel>${channel}</channel>
      </plugin>
    </gazebo>
    <gazebo>
      <plugin name="${robot_namespace}_${surface_name}_lift_drag" filename="libLiftDragPlugin.so">
        <a0>0.0</a0>
        <cla>${c_L_alpha}</cla>
        <cda>0.1</cda>
        <cma>-0.1</cma>
        <alpha_stall>${alpha_stall}</alpha_stall>
        <cla_stall>-0.1</cla_stall>
        <cda_stall>0.1</cda_stall>
        <cma_stall>-0.2</cma_stall>
        <cp>0.0 0.0 0.0</cp>
        <area>${area}</area>
        <air_density>1.225</air_density>
        <forward>${forward_x} ${forward_y} ${forward_z}</forward>
        <upward>${up_x} ${up_y} ${up_z}</upward>
        <link_name>${robot_namespace}/${surface_name}</link_name>
      </plugin>
    </gazebo>
    <gazebo reference="${robot_namespace}/${surface_name}">
      <material>Gazebo/${color}</material>
    </gazebo>
  </xacro:macro>

</robot>
